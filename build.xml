<project name="HAT" default="compile" basedir=".">

  <!-- set global properties for this build -->
	<property name="src" value="src"/>
	<property file="${basedir}/build.properties" />
	<property name="classes" value="${basedir}/build/classes"/>
	<property name="classes.dir" value="${webapp.home}/WEB-INF/classes"/>
	<property name="lib" value="${basedir}/public/WEB-INF/lib"/>
	<property name="lib" value="${webapp.home}/WEB-INF/lib"/>
	<property name="test" value="test"/>

  <!-- define external classpath, i.e. JARs and classes not found in WEB-INF/classes and WEB-INF/lib -->
	<path id="classpath.externals">
		<pathelement location="${lib-servlet-jar}"/>
	</path>

  <!-- define classpath for compile -->
	<path id="classpath.compile">
		<fileset dir="${lib}">
			<include name="**/*.jar"/>
		</fileset>
		<path refid="classpath.externals"/>
	</path>

	<target name="prepare">
		<condition property="build.properties.exists">
			<available file="build.properties" />
		</condition>

		<fail unless="build.properties.exists"
		    message="Couldn't find build.properties file! Make a copy from default.properties and rename it to build.properties. Modify properties, if needed."/>
	</target>

	<target name="install" depends="buildjar">
		<!-- Create directories as needed -->
		<mkdir dir="${webapp.home}"/>
		<copy todir="${webapp.home}" overwrite="true">
			<fileset dir="public">
				<exclude name="**/*.properties"/>
			</fileset>
		</copy>

		<echo message="webapp-home: ${webapp.home}"/>
		<copy todir="${classes.dir}" overwrite="true">
			<fileset dir="${basedir}/public/WEB-INF/classes"/>
			<globmapper from="*" to="*.dist"/>
		</copy>
		<copy file="${basedir}/public/WEB-INF/classes/uit.properties" todir="${classes.dir}"/>
	</target>

	<!-- compile target, refers to pre-defined paths -->
	<target name="compile" depends="prepare">
		<mkdir dir="${basedir}/build"/>
		<mkdir dir="${classes}"/>
		<javac srcdir="${src}" destdir="${classes}" source="1.5" target="1.5" debug="on">
			<classpath refid="classpath.compile"/>
		</javac>
	</target>

	<!-- build jar target -->
	<target name="buildjar" depends="compile">
		<jar basedir="${classes}" jarfile="${lib}/uit-helpadmin.jar" includes="**/*.class">
			<manifest>
				<attribute name="version-number" value="1.0"/>
			</manifest>
		</jar>
		<delete dir="${build}/eionet"/>
	</target>

  <!-- define classpath for unit tests -->
	<path id="classpath.compile-tests">
		<pathelement location="${classes}"/>
		<fileset dir="${test}/lib">
			<include name="*.jar"/>
		</fileset>
		<path refid="classpath.compile"/>
	</path>

  <!-- define classpath to be used bu JUnit -->
  <path id="classpath.test">
    <pathelement path="${test}/build"/>
    <pathelement path="${classes}"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
    <path refid="classpath.compile-tests"/>
  </path>

  <!-- compile target for compiling unit tests, expects classes-under-test compiled, refers to pre-defined paths -->
  <target name="compile-tests" depends="compile">
    <javac srcdir="${test}/src" destdir="${test}/build" debug="on">
      <classpath refid="classpath.compile-tests"/>
    </javac>
  </target>

  <!-- define src files to be included and/or excluded when JUnit searches for test cases -->
  <fileset id="fileset.test" dir="${test}/src">
    <include name="**/*Test.java"/>
  </fileset>

  <!-- test target, refers to pre-defined paths and filesets -->
  <target name="test" depends="compile-tests" description="Runs all found unit tests">
    <junit haltonfailure="yes" failureproperty="unittestFailed" showoutput="yes" printsummary="yes">
      <classpath refid="classpath.test"/>
      <formatter type="brief" usefile="false"/>
      <batchtest fork="yes">
        <fileset refid="fileset.test"/>
      </batchtest>
    </junit>
    <fail if="unittestFailed" message="One or more unit tests failed."/>
  </target>

</project>
